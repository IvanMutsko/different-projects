{"mappings":"AAAA,MAGMA,EAAeC,eAAgBC,EAAUC,GAC7C,IACE,MAAMC,QAAiBC,MACrB,uDAAyBH,SAAgBC,yDAG3C,aAD0BC,EAASE,M,CAEnC,MAAOC,GACPC,QAAQC,IAAIF,E,GCTVG,EAAQC,SAASC,iBAAiB,aAClCC,EAAcF,SAASG,cAAc,UACrCC,EAAiBJ,SAASG,cAAc,kBAmE9C,SAASE,EAAeC,GACtB,MAAMC,EAAO,IAAIC,KAAY,IAAPF,GAChBG,EAAiBF,EAAKG,oBAC5Bb,QAAQC,IAAIW,GACZF,EAAKI,WAAWJ,EAAKK,aAAeH,GAKpC,MAAO,GAHOF,EAAKM,WAAWC,WAAWC,SAAS,EAAG,QACrCR,EAAKK,aAAaE,WAAWC,SAAS,EAAG,M,CAxE3DhB,EAAMiB,SAAQC,IACZA,EAAMC,MAAMC,KAAO,UACnBF,EAAMC,MAAME,OAAS,UACrBH,EAAMC,MAAMG,YAAc,MAE1BJ,EAAMK,iBAAiB,cAAcC,IACnCN,EAAMC,MAAMC,KAAO,UAEnB,MAAMK,EAAgBP,EAAMQ,aAAa,SACzCvB,EAAYwB,YAAc,KAAKF,GAAe,IAGhDP,EAAMK,iBAAiB,cAAcC,IACnCN,EAAMC,MAAMC,KAAO,UACnBjB,EAAYwB,YAAc,EAAE,IAG9BT,EAAMK,iBAAiB,SAASC,IAC9B,MAAMI,EAAgBJ,EAAIK,OAAOH,aAAa,gBAExClC,EAAWoC,EAAcE,MAAM,KAAK,GAAGC,OACvCtC,EAAYmC,EAAcE,MAAM,KAAK,GAAGC,OAE9CzC,EAAaE,EAAUC,GAAWuC,MAAKC,IACrC,MAAMC,KAAEA,EAAIC,QAAEA,EAAOC,KAAEA,EAAIC,OAAEA,EAAMC,IAAEA,GAAQL,EAEvCM,EAAuB,CAC3BC,KAAMN,EAAKM,KACXC,UAAWP,EAAKQ,WAChBC,UAA2B,QAAhBT,EAAKS,UAAqBC,QAAQ,GAC7CC,SAAUX,EAAKW,SACfC,UAAWV,EAAKW,MAChBC,SAAUZ,EAAKa,KACfZ,OAAQA,EAAOa,IACfC,QAAS7C,EAAegC,EAAIa,SAC5BC,OAAQ9C,EAAegC,EAAIc,QAC3BC,YAAalB,EAAQ,GAAGkB,YACxBC,KAAMnB,EAAQ,GAAGmB,KACjBpB,KAAMC,EAAQ,GAAGD,KACjBqB,GAAIpB,EAAQ,GAAGoB,IAGjBlD,EAAesB,YAAc,GAOnC,SAA6B6B,GAC3B,MAAMC,EAAS,uB,4EAGAd,4C,mCAEEG,6C,yEAGAK,gC,EACIC,iBAGrB/C,EAAeqD,mBAAmB,YAAaD,E,CAlB3CE,CAAoBpB,EAAqB,GACzC,GACF","sources":["src/map/js/fetchweather.js","src/map/js/index.js"],"sourcesContent":["const URL_WEATHER_API = 'https://api.openweathermap.org/data/2.5/weather?';\nconst API_KEY = 'c807f2acdd74ab8a78287327fdf94a6e';\n\nconst fetchWeather = async function (latitude, longitude) {\n  try {\n    const response = await fetch(\n      `${URL_WEATHER_API}lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`\n    );\n    const weatherDate = await response.json();\n    return weatherDate;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { fetchWeather };\n","import { fetchWeather } from './fetchweather';\n\nconst mapEl = document.querySelectorAll('#map path');\nconst stateNameEl = document.querySelector('.state');\nconst weatherBlockEl = document.querySelector('#weather-block');\n\nmapEl.forEach(state => {\n  state.style.fill = '#ffd700';\n  state.style.stroke = '#499DF5';\n  state.style.strokeWidth = '1px';\n\n  state.addEventListener('mouseenter', evt => {\n    state.style.fill = '#f7f760';\n\n    const stateNameText = state.getAttribute('title');\n    stateNameEl.textContent = `, ${stateNameText}`;\n  });\n\n  state.addEventListener('mouseleave', evt => {\n    state.style.fill = '#ffd700';\n    stateNameEl.textContent = '';\n  });\n\n  state.addEventListener('click', evt => {\n    const geoCodeString = evt.target.getAttribute('data-geocode');\n\n    const latitude = geoCodeString.split(',')[0].trim();\n    const longitude = geoCodeString.split(',')[1].trim();\n\n    fetchWeather(latitude, longitude).then(weatherData => {\n      const { main, weather, wind, clouds, sys } = weatherData;\n\n      const weatherDataForMarkup = {\n        temp: main.temp, //\n        feelsLike: main.feels_like, //\n        pressure: (main.pressure * 0.750062).toFixed(0), //\n        humidity: main.humidity, //\n        windSpeed: wind.speed, //\n        windGust: wind.gust, //\n        clouds: clouds.all, //\n        sunrise: formatUnixTime(sys.sunrise), //\n        sunset: formatUnixTime(sys.sunset), //\n        description: weather[0].description,\n        icon: weather[0].icon,\n        main: weather[0].main,\n        id: weather[0].id,\n      };\n\n      weatherBlockEl.textContent = '';\n\n      createMarkupWeather(weatherDataForMarkup);\n    });\n  });\n});\n\nfunction createMarkupWeather(data) {\n  const markup = `\n  <p>Температура: ${data.temp} °C</p>\n  <p>відчувається як: ${data.feelsLike} °C</p>\n  <p>Тиск: ${data.pressure} мм рт. ст.</p>\n  <p>Вологість: ${data.humidity} %</p>\n  <p>Вітер: ${data.windSpeed} м/с</p>\n  <p>Вітер, пориви до: ${data.windGust} м/с</p>\n  <p>Хмарність: ${data.clouds} %</p>\n    <p>Схід: ${data.sunrise}</p>\n      <p>Захід: ${data.sunset}</p>\n  `;\n\n  weatherBlockEl.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction formatUnixTime(time) {\n  const date = new Date(time * 1000);\n  const timezoneOffset = date.getTimezoneOffset();\n  console.log(timezoneOffset);\n  date.setMinutes(date.getMinutes() - timezoneOffset);\n\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${hours}:${minutes}`;\n}\n\n// розібратись з правильним часовим поясом\n"],"names":["$43196f16aa22fbad$export$7a954b5c9a93cc61","async","latitude","longitude","response","fetch","json","error","console","log","$89fc16ce552503b6$var$mapEl","document","querySelectorAll","$89fc16ce552503b6$var$stateNameEl","querySelector","$89fc16ce552503b6$var$weatherBlockEl","$89fc16ce552503b6$var$formatUnixTime","time","date","Date","timezoneOffset","getTimezoneOffset","setMinutes","getMinutes","getHours","toString","padStart","forEach","state","style","fill","stroke","strokeWidth","addEventListener","evt","stateNameText","getAttribute","textContent","geoCodeString","target","split","trim","then","weatherData","main","weather","wind","clouds","sys","weatherDataForMarkup","temp","feelsLike","feels_like","pressure","toFixed","humidity","windSpeed","speed","windGust","gust","all","sunrise","sunset","description","icon","id","data","markup","insertAdjacentHTML","$89fc16ce552503b6$var$createMarkupWeather"],"version":3,"file":"map.16e29d42.js.map"}