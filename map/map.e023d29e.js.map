{"mappings":"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","sources":["src/map/js/fetchweather.js","src/map/js/index.js"],"sourcesContent":["const URL_WEATHER_API = 'https://api.openweathermap.org/data/2.5/weather?';\nconst API_KEY = 'c807f2acdd74ab8a78287327fdf94a6e';\n\nconst fetchWeather = async function (latitude, longitude) {\n  try {\n    const response = await fetch(\n      `${URL_WEATHER_API}lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`\n    );\n    const weatherDate = await response.json();\n    return weatherDate;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { fetchWeather };\n","import 'normalize.css';\nimport { fetchWeather } from './fetchweather';\n\nconst mapEl = document.querySelectorAll('#map path');\nconst stateNameEl = document.querySelector('.state');\nconst weatherBlockEl = document.querySelector('#weather-block');\n\nlet currentState = '';\n\nmapEl.forEach(state => {\n  state.style.fill = '#ffd700';\n  state.style.fillOpacity = '0.3';\n  state.style.stroke = 'rgba(0, 0, 0, 0.3)';\n  state.style.strokeWidth = '1px';\n\n  state.addEventListener('mouseenter', evt => {\n    state.style.fill = '#0057b8';\n\n    const stateNameText = state.getAttribute('title');\n    currentState = stateNameText;\n    stateNameEl.textContent = `, ${stateNameText}`;\n  });\n\n  state.addEventListener('mouseleave', evt => {\n    state.style.fill = '#ffd700';\n    stateNameEl.textContent = '';\n  });\n\n  state.addEventListener('click', evt => {\n    const geoCodeString = evt.target.getAttribute('data-geocode');\n\n    const latitude = geoCodeString.split(',')[0].trim();\n    const longitude = geoCodeString.split(',')[1].trim();\n\n    fetchWeather(latitude, longitude).then(weatherData => {\n      const { main, weather, wind, clouds, sys } = weatherData;\n\n      const weatherDataForMarkup = {\n        temp: Math.round(main.temp),\n        feelsLike: Math.round(main.feels_like),\n        pressure: (main.pressure * 0.750062).toFixed(0),\n        humidity: main.humidity,\n        windSpeed: Math.round(wind.speed),\n        windGust: Math.round(wind.gust),\n        clouds: clouds.all,\n        sunrise: formatUnixTime(sys.sunrise),\n        sunset: formatUnixTime(sys.sunset),\n        description: weather[0].description,\n        icon: weather[0].icon,\n        main: weather[0].main,\n        id: weather[0].id,\n      };\n\n      weatherBlockEl.textContent = '';\n\n      weatherBlockEl.classList.remove('visually-hidden');\n\n      createMarkupWeather(weatherDataForMarkup);\n    });\n  });\n});\n\nfunction createMarkupWeather(data) {\n  const markup = `\n  <div class=\"weather-description\">\n          <h2 class=\"weather-state\">${currentState}</h2>\n          <h2 class=\"descr-title\">${\n            data.description.charAt(0).toUpperCase() + data.description.slice(1)\n          }</h2>\n          <img\n            class=\"weather-img\"\n            src=\"https://openweathermap.org/img/wn/${data.icon}@2x.png\"\n          />\n          <ul class=\"time-wrap weather-list\">\n                <li>sunrise: ${data.sunrise}</li>\n                <li>sunset: ${data.sunset}</li>\n              </ul>\n          </ul>\n        </div>\n        <div class=\"wether-data-wrap\">\n          <ul class=\"weather-list\">\n            <li>Temperature: ${data.temp} °C</li>\n            <li>Feels like: ${data.feelsLike} °C</li>\n            <li>Wind: ${data.windSpeed} m/s</li>\n            <li>Wind gust: ${data.windGust} m/s</li>\n          </ul>\n          <ul class=\"weather-list\">\n            <li>Pressure: ${data.pressure} mmHg</li>\n            <li>Humidity: ${data.humidity} %</li>\n            <li>Cloudiness: ${data.clouds} %</li>\n          </ul>\n        </div>\n  `;\n\n  weatherBlockEl.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction formatUnixTime(time) {\n  const date = new Date(time * 1000);\n\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${hours}:${minutes}`;\n}\n"],"names":["$bpxeT","parcelRequire","$a0ce4a79f701afff$export$7a954b5c9a93cc61","$parcel$interopDefault","$2TvXO","mark","_callee","latitude","longitude","response","weatherDate","fetch","concat","_ctx","sent","json","console","log","t0","$6b5c088a86eb94cb$var$mapEl","document","querySelectorAll","$6b5c088a86eb94cb$var$stateNameEl","querySelector","$6b5c088a86eb94cb$var$weatherBlockEl","$6b5c088a86eb94cb$var$currentState","$6b5c088a86eb94cb$var$formatUnixTime","time","date","Date","hours","getHours","toString","padStart","minutes","getMinutes","forEach","state","style","fill","fillOpacity","stroke","strokeWidth","addEventListener","evt","stateNameText","getAttribute","textContent","geoCodeString","target","split","trim","then","weatherData","data","markup","main","weather","wind","clouds","sys","weatherDataForMarkup","temp","Math","round","feelsLike","feels_like","pressure","toFixed","humidity","windSpeed","speed","windGust","gust","all","sunrise","sunset","description","icon","id","classList","remove","charAt","toUpperCase","slice","insertAdjacentHTML"],"version":3,"file":"map.e023d29e.js.map"}