{"mappings":"iiBAAA,I,EAAAA,EAAAC,EAAA,S,aAGMC,G,EAAeC,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAC,EAAgBC,EAAUC,G,IAErCC,EAGAC,E,2FAHiBC,MACrB,GAAyBC,OANP,mDAMC,QAAsBA,OAAhBL,EAAS,SAAuCK,OAAhCJ,EAAU,wBAA8BI,OALvE,qC,cAINH,EAAQI,EAAAC,K,SAGYL,EAASM,O,cAA7BL,EAAWG,EAAAC,K,kBACVJ,G,kCAEPM,QAAQC,IAAGJ,EAAAK,I,mEARsBX,EAAUC,G,iCCDzCW,EAAQC,SAASC,iBAAiB,aAClCC,EAAcF,SAASG,cAAc,UACrCC,EAAiBJ,SAASG,cAAc,kBAmE9C,SAASE,EAAeC,GACtB,IAAMC,EAAO,IAAIC,KAAY,IAAPF,GAChBG,EAAiBF,EAAKG,oBAC5Bd,QAAQC,IAAIY,GACZF,EAAKI,WAAWJ,EAAKK,aAAeH,GAEpC,IAAMI,EAAQN,EAAKO,WAAWC,WAAWC,SAAS,EAAG,KAC/CC,EAAUV,EAAKK,aAAaG,WAAWC,SAAS,EAAG,KAEzD,MAAO,GAAYxB,OAATqB,EAAM,KAAWrB,OAARyB,E,CA1ErBlB,EAAMmB,SAAQ,SAAAC,GACZA,EAAMC,MAAMC,KAAO,UACnBF,EAAMC,MAAME,OAAS,UACrBH,EAAMC,MAAMG,YAAc,MAE1BJ,EAAMK,iBAAiB,cAAc,SAAAC,GACnCN,EAAMC,MAAMC,KAAO,UAEnB,IAAMK,EAAgBP,EAAMQ,aAAa,SACzCzB,EAAY0B,YAAc,KAAmBpC,OAAdkC,E,IAGjCP,EAAMK,iBAAiB,cAAc,SAAAC,GACnCN,EAAMC,MAAMC,KAAO,UACnBnB,EAAY0B,YAAc,E,IAG5BT,EAAMK,iBAAiB,SAAS,SAAAC,GAC9B,IAAMI,EAAgBJ,EAAIK,OAAOH,aAAa,gBAExCxC,EAAW0C,EAAcE,MAAM,KAAK,GAAGC,OACvC5C,EAAYyC,EAAcE,MAAM,KAAK,GAAGC,OAE9ClD,EAAaK,EAAUC,GAAW6C,MAAK,SAAAC,GACrC,IAyBuBC,EACrBC,EA1BMC,EAAqCH,EAArCG,KAAMC,EAA+BJ,EAA/BI,QAASC,EAAsBL,EAAtBK,KAAMC,EAAgBN,EAAhBM,OAAQC,EAAQP,EAARO,IAE/BC,EAAuB,CAC3BC,KAAMN,EAAKM,KACXC,UAAWP,EAAKQ,WAChBC,UAA2B,QAAhBT,EAAKS,UAAqBC,QAAQ,GAC7CC,SAAUX,EAAKW,SACfC,UAAWV,EAAKW,MAChBC,SAAUZ,EAAKa,KACfZ,OAAQA,EAAOa,IACfC,QAASjD,EAAeoC,EAAIa,SAC5BC,OAAQlD,EAAeoC,EAAIc,QAC3BC,YAAalB,EAAQ,GAAGkB,YACxBC,KAAMnB,EAAQ,GAAGmB,KACjBpB,KAAMC,EAAQ,GAAGD,KACjBqB,GAAIpB,EAAQ,GAAGoB,IAGjBtD,EAAewB,YAAc,GAQ3BQ,EAAS,uBAEkB5C,QAHN2C,EALHO,GAOUC,KAAK,mCAEdnD,OADW2C,EAAKS,UAAU,wBAE/BpD,OADL2C,EAAKW,SAAS,qCAERtD,OADI2C,EAAKa,SAAS,wBAEXxD,OADX2C,EAAKc,UAAU,qCAEHzD,OADO2C,EAAKgB,SAAS,8BAE5B3D,OADG2C,EAAKK,OAAO,yBAEjBhD,OADH2C,EAAKmB,QAAQ,0BACG9D,OAAZ2C,EAAKoB,OAAO,YAGjCnD,EAAeuD,mBAAmB,YAAavB,E","sources":["src/map/js/fetchweather.js","src/map/js/index.js"],"sourcesContent":["const URL_WEATHER_API = 'https://api.openweathermap.org/data/2.5/weather?';\nconst API_KEY = 'c807f2acdd74ab8a78287327fdf94a6e';\n\nconst fetchWeather = async function (latitude, longitude) {\n  try {\n    const response = await fetch(\n      `${URL_WEATHER_API}lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`\n    );\n    const weatherDate = await response.json();\n    return weatherDate;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { fetchWeather };\n","import { fetchWeather } from './fetchweather';\n\nconst mapEl = document.querySelectorAll('#map path');\nconst stateNameEl = document.querySelector('.state');\nconst weatherBlockEl = document.querySelector('#weather-block');\n\nmapEl.forEach(state => {\n  state.style.fill = '#ffd700';\n  state.style.stroke = '#499DF5';\n  state.style.strokeWidth = '1px';\n\n  state.addEventListener('mouseenter', evt => {\n    state.style.fill = '#f7f760';\n\n    const stateNameText = state.getAttribute('title');\n    stateNameEl.textContent = `, ${stateNameText}`;\n  });\n\n  state.addEventListener('mouseleave', evt => {\n    state.style.fill = '#ffd700';\n    stateNameEl.textContent = '';\n  });\n\n  state.addEventListener('click', evt => {\n    const geoCodeString = evt.target.getAttribute('data-geocode');\n\n    const latitude = geoCodeString.split(',')[0].trim();\n    const longitude = geoCodeString.split(',')[1].trim();\n\n    fetchWeather(latitude, longitude).then(weatherData => {\n      const { main, weather, wind, clouds, sys } = weatherData;\n\n      const weatherDataForMarkup = {\n        temp: main.temp, //\n        feelsLike: main.feels_like, //\n        pressure: (main.pressure * 0.750062).toFixed(0), //\n        humidity: main.humidity, //\n        windSpeed: wind.speed, //\n        windGust: wind.gust, //\n        clouds: clouds.all, //\n        sunrise: formatUnixTime(sys.sunrise), //\n        sunset: formatUnixTime(sys.sunset), //\n        description: weather[0].description,\n        icon: weather[0].icon,\n        main: weather[0].main,\n        id: weather[0].id,\n      };\n\n      weatherBlockEl.textContent = '';\n\n      createMarkupWeather(weatherDataForMarkup);\n    });\n  });\n});\n\nfunction createMarkupWeather(data) {\n  const markup = `\n  <p>Температура: ${data.temp} °C</p>\n  <p>відчувається як: ${data.feelsLike} °C</p>\n  <p>Тиск: ${data.pressure} мм рт. ст.</p>\n  <p>Вологість: ${data.humidity} %</p>\n  <p>Вітер: ${data.windSpeed} м/с</p>\n  <p>Вітер, пориви до: ${data.windGust} м/с</p>\n  <p>Хмарність: ${data.clouds} %</p>\n    <p>Схід: ${data.sunrise}</p>\n      <p>Захід: ${data.sunset}</p>\n  `;\n\n  weatherBlockEl.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction formatUnixTime(time) {\n  const date = new Date(time * 1000);\n  const timezoneOffset = date.getTimezoneOffset();\n  console.log(timezoneOffset);\n  date.setMinutes(date.getMinutes() - timezoneOffset);\n\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${hours}:${minutes}`;\n}\n\n// розібратись з правильним часовим поясом\n"],"names":["$bpxeT","parcelRequire","$a0ce4a79f701afff$export$7a954b5c9a93cc61","$parcel$interopDefault","$2TvXO","mark","_callee","latitude","longitude","response","weatherDate","fetch","concat","_ctx","sent","json","console","log","t0","$6b5c088a86eb94cb$var$mapEl","document","querySelectorAll","$6b5c088a86eb94cb$var$stateNameEl","querySelector","$6b5c088a86eb94cb$var$weatherBlockEl","$6b5c088a86eb94cb$var$formatUnixTime","time","date","Date","timezoneOffset","getTimezoneOffset","setMinutes","getMinutes","hours","getHours","toString","padStart","minutes","forEach","state","style","fill","stroke","strokeWidth","addEventListener","evt","stateNameText","getAttribute","textContent","geoCodeString","target","split","trim","then","weatherData","data","markup","main","weather","wind","clouds","sys","weatherDataForMarkup","temp","feelsLike","feels_like","pressure","toFixed","humidity","windSpeed","speed","windGust","gust","all","sunrise","sunset","description","icon","id","insertAdjacentHTML"],"version":3,"file":"map.2c96c4ee.js.map"}