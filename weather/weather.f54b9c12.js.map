{"mappings":"iiBAAA,I,EAAAA,EAAAC,EAAA,S,aAGMC,G,EAAYC,EAAAH,EAAA,CAAAG,EAAAC,GAAAC,MAAA,SAAAC,EAAgBC,G,IAExBC,EAGAC,E,2FAHiBC,MACrB,GAAgCC,OANhB,0CAMC,iBAAoBA,OAALJ,EAAK,c,cADjCC,EAAQI,EAAAC,K,SAGWL,EAASM,O,cAA5BL,EAAUG,EAAAC,K,kBACTJ,G,kCAEPM,QAAQC,IAAGJ,EAAAK,I,mEARmBV,G,iCAclCQ,QAAQC,IAAIE,wBCfZ,IAAMC,EAASC,SAASC,cAAc,iBAChCC,EAAcF,SAASC,cAAc,eACrCE,EAAaH,SAASC,cAAc,cAE1CC,EAAYE,iBAAiB,SAE7B,WACE,IAAIjB,EAAOe,EAAYG,MAAMC,OAEhB,KAATnB,EACFL,EAAUK,GAAMoB,MAAK,SAAAlB,G,OAMzB,SAAkCmB,GAChCL,EAAWM,UAAY,GAEvB,IAAMC,EAASF,EAAYG,QAC3BhB,QAAQC,IAAIc,QAEGE,IAAXF,GACFA,EAAOG,SAAQ,SAAA1B,GACb,IAAM2B,EAAS,mBAA6CvB,OAA1BJ,EAAK4B,GAAG,oBAAgCxB,OAAdJ,EAAK6B,KAAK,MAAoBzB,OAAhBJ,EAAK8B,OAAO,MAAiB1B,OAAbJ,EAAK+B,QAAQ,kBACvGf,EAAWgB,mBAAmB,YAAaL,E,IAfVM,CAAyB/B,E,IAE5Dc,EAAWM,UAAY,E,IAoB3BV,EAAOK,iBAAiB,SAExB,SAAwBiB,GACtBA,EAAIC,iBAEc,IAAIC,SAASxB,GAErBc,SAAQ,SAAAR,G,OAASV,QAAQC,IAAIS,E","sources":["src/weather/js/fetchCityCode.js","src/weather/js/index.js"],"sourcesContent":["const GEOCODING_API = 'https://geocoding-api.open-meteo.com/v1';\nconst API_KEY = 'c807f2acdd74ab8a78287327fdf94a6e';\n\nconst fetchCity = async function (city) {\n  try {\n    const response = await fetch(\n      `${GEOCODING_API}/search?name=${city}&count=10`\n    );\n    const findedCity = await response.json();\n    return findedCity;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { fetchCity };\n\nconsole.log(GeolocationCoordinates)","import { fetchCity } from './fetchCityCode';\n\nconst formEl = document.querySelector('#weather-form');\nconst cityInputEl = document.querySelector('.city-input');\nconst findListEl = document.querySelector('.city-list');\n\ncityInputEl.addEventListener('input', onFillingInput);\n\nfunction onFillingInput() {\n  let city = cityInputEl.value.trim();\n\n  if (city !== '') {\n    fetchCity(city).then(findedCity => renderMarkupFindedCities(findedCity));\n  } else {\n    findListEl.innerHTML = '';\n  }\n}\n\nfunction renderMarkupFindedCities(citiesArray) {\n  findListEl.innerHTML = '';\n\n  const cities = citiesArray.results;\n  console.log(cities);\n\n  if (cities !== undefined) {\n    cities.forEach(city => {\n      const markup = `<li><button id=\"${city.id}\" type=\"button\">${city.name}, ${city.admin1}, ${city.country}</button></li>`;\n      findListEl.insertAdjacentHTML('beforeend', markup);\n    });\n  }\n}\n\n// ======================================\n\nformEl.addEventListener('click', onFindBtnClick);\n\nfunction onFindBtnClick(evt) {\n  evt.preventDefault();\n\n  const formValue = new FormData(formEl);\n\n  formValue.forEach(value => console.log(value));\n}\n"],"names":["$bpxeT","parcelRequire","$77f7371014a661fc$export$f9b5030464ac40b3","$parcel$interopDefault","$2TvXO","mark","_callee","city","response","findedCity","fetch","concat","_ctx","sent","json","console","log","t0","GeolocationCoordinates","$4a63938f7764858e$var$formEl","document","querySelector","$4a63938f7764858e$var$cityInputEl","$4a63938f7764858e$var$findListEl","addEventListener","value","trim","then","citiesArray","innerHTML","cities","results","undefined","forEach","markup","id","name","admin1","country","insertAdjacentHTML","$4a63938f7764858e$var$renderMarkupFindedCities","evt","preventDefault","FormData"],"version":3,"file":"weather.f54b9c12.js.map"}